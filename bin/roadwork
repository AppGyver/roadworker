#!/usr/bin/env ruby
$: << File.expand_path("#{File.dirname __FILE__}/../lib")
require 'rubygems'
require 'roadworker'
require 'optparse'
require 'logger'

file = 'Routefile'
output_file = '-'
mode = nil
logger = Logger.new($stdout)

logger.formatter = proc {|severity, datetime, progname, msg|
  "#{msg}\n"
}

options = {
  :logger      => logger,
  :dry_run     => false,
  :force       => false,
  :with_soa_ns => false,
  :color       => true,
  :debug       => false,
}

ARGV.options do |opt|
  access_key = nil
  secret_key = nil

  opt.on('-k', '--access-key ACCESS_KEY') {|v| access_key            = v       }
  opt.on('-s', '--secret-key SECRET_KEY') {|v| secret_key            = v       }
  opt.on('-a', '--apply')                 {|v| mode                  = :apply  }
  opt.on('-f', '--file FILE')             {|v| file                  = v       }
  opt.on('',   '--dry-run')               {|v| options[:dry_run]     = true    }
  opt.on(''  , '--force')                 {    options[:force]       = true    }
  opt.on('-e', '--export')                {|v| mode                  = :export }
  opt.on('-o', '--output FILE')           {|v| output_file           = v       }
  opt.on('',   '--with-soa-ns')           {|v| options[:with_soa_ns] = true    }
  opt.on('-t', '--test')                  {|v| mode                  = :test   }
  opt.on(''  , '--no-color')              {    options[:color]       = false   }
  opt.on(''  , '--debug')                 {    options[:debug]       = true    }
  opt.parse!

  if access_key and secret_key
    AWS.config({
      :access_key_id     => access_key,
      :secret_access_key => secret_key,
    })
  elsif (access_key and !secret_key) or (!access_key and secret_key) or mode.nil?
    puts opt.help
    exit 1
  end
end

if options[:debug]
  AWS.config(
    :http_wire_trace => true,
    :logger => options[:logger]
  )
end

begin
  logger = options[:logger]
  logger.level = options[:debug] ? Logger::DEBUG : Logger::INFO

  client = Roadworker::Client.new(options)

  case mode
  when :export
    exported = client.export

    if output_file == '-'
      logger.info('# Export Route53')
      puts client.export
    else
      logger.info("Export Route53 to `#{output_file}`")
      open(output_file, 'wb') {|f| f.puts client.export }
    end
  when :test
    # XXX:
    unless File.exist?(file)
      raise "No Routefile found (looking for: #{file})"
    end

    examples, failures = client.test(file)
    examples_message = (examples > 1 ? "%d examples" : "%d example") % examples
    failures_message = (failures > 1 ? "%d failures" : "%d failure") % failures
    result_message = [examples_message, failures_message].join(', ')

    if failures.zero?
      logger.info(result_message.green)
    else
      logger.info(result_message.red)
      exit 1
    end
  when :apply
    unless File.exist?(file)
      raise "No Routefile found (looking for: #{file})"
    end

    msg = "Apply `#{file}` to Route53"
    msg << ' (dry-run)' if options[:dry_run]
    logger.info(msg)

    updated = client.apply(file)

    logger.info('No change'.intense_blue) unless updated
  else
    raise 'must not happen'
  end
rescue => e
  if options[:debug]
    raise e
  else
    $stderr.puts e
    exit 1
  end
end
